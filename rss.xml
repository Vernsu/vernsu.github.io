<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Swift学徒</title>
    <link>http://swift.diagon.me/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>笨办法学Swift</description>
    <pubDate>Sat, 18 Feb 2017 09:10:50 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>iOS 客户端开发需要掌握的 HTTP 知识</title>
      <link>http://swift.diagon.me/iOS-Swift-HTTP-TCP%E2%80%94IP%E2%80%94WebSocket-Socket/</link>
      <guid>http://swift.diagon.me/iOS-Swift-HTTP-TCP%E2%80%94IP%E2%80%94WebSocket-Socket/</guid>
      <pubDate>Fri, 17 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;注：本文内容总结自《图解HTTP》一书。&lt;/p&gt;
&lt;h2 id=&quot;网络基础&quot;&gt;&lt;a href=&quot;#网络基础&quot; class=&quot;headerlink&quot; title=&quot;网络基础&quot;&gt;&lt;/a&gt;网络基础&lt;/h2&gt;&lt;h3 id=&quot;使用-HTTP-访问-Web&quot;&gt;&lt;a href=&quot;#使用-
      
      </description>
      
      <content:encoded><![CDATA[<p>注：本文内容总结自《图解HTTP》一书。</p>
<h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="使用-HTTP-访问-Web"><a href="#使用-HTTP-访问-Web" class="headerlink" title="使用 HTTP 访问 Web"></a>使用 HTTP 访问 Web</h3><p>在浏览器中输入域名并按下回车，发生了什么事情？这是一个古老的问题。详细的答案请点<a href="https://github.com/skyline75489/what-happens-when-zh_CN" target="_blank" rel="external">这里</a>。<br>简单的说就是浏览器根据 URL 从服务器获取了文件资源等信息，从而显示出 Web 页面。而其间完成从客户端到服务端之间运作流程的协议即 HTTP。</p>
<h3 id="网络基础-TCP-IP"><a href="#网络基础-TCP-IP" class="headerlink" title="网络基础 TCP/IP"></a>网络基础 TCP/IP</h3><h4 id="TCP-IP-是什么"><a href="#TCP-IP-是什么" class="headerlink" title="TCP/IP 是什么"></a>TCP/IP 是什么</h4><p>TCP/IP 是互联网相关的各类协议集合起来的总称。比如包含DNS，IP，PPPoE，UDP，FTP，HTTP，TCP，ICMP等等。</p>
<h4 id="网络分层"><a href="#网络分层" class="headerlink" title="网络分层"></a>网络分层</h4><p>TCP/IP 协议族按层次分为4层：应用层、传输层、网络层和数据链路层。这样做的意义是：如果互联网只由一个协议统筹，某个地方需要改变设计时，就必须把所有部分整体替换掉。而分层之后只需把变动的层替换掉即可。把各层之间的接口部分规划好之后，每个层次内部的设计就能够自由改动了。而对应的层次只需要考虑到自己的任务即可。</p>
<ul>
<li>应用层：决定了向用户提供应用服务时通信的活动。（FTP，DNS，HTTP）</li>
<li>传输层：对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。（TCP、UDP）</li>
<li>网络层：用来处理在网络上流动的数据包。该层规定了通过怎样的路径到达对方计算机，并把数据包传送给对方。（IP）</li>
<li>链路层（又名数据链路层）：用来处理连接网络的硬件部分。</li>
</ul>
<h4 id="通信传输流"><a href="#通信传输流" class="headerlink" title="通信传输流"></a>通信传输流</h4><p>进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则往应用层往上走。</p>
<p>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。</p>
<h3 id="与-HTTP-关系密切的协议：IP、TCP-和-DNS"><a href="#与-HTTP-关系密切的协议：IP、TCP-和-DNS" class="headerlink" title="与 HTTP 关系密切的协议：IP、TCP 和 DNS"></a>与 HTTP 关系密切的协议：IP、TCP 和 DNS</h3><h4 id="负责数据包传送的-IP"><a href="#负责数据包传送的-IP" class="headerlink" title="负责数据包传送的 IP"></a>负责数据包传送的 IP</h4><p>IP 协议的作用是把各种数据包传送给对方。涉及到 IP 地址、MAC 地址。</p>
<h4 id="确保可靠性的-TCP"><a href="#确保可靠性的-TCP" class="headerlink" title="确保可靠性的 TCP"></a>确保可靠性的 TCP</h4><p>TCP 将 HTTP 请求报文分割成报文段，把每个报文段可靠的传给对方。</p>
<p>为了准确无误地将每个报文段送达目标处，TCP 协议采用了三次握手（three-way handshaking）策略。</p>
<p>用 TCP 协议把数据包送出去后，TCP 不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了 TCP 的标志 —— SYN 和 ACK。</p>
<p>发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。</p>
<h4 id="负责域名解析的-DNS"><a href="#负责域名解析的-DNS" class="headerlink" title="负责域名解析的 DNS"></a>负责域名解析的 DNS</h4><p>它提供域名到 IP 地址之间的解析服务。</p>
<h2 id="HTTP-基础"><a href="#HTTP-基础" class="headerlink" title="HTTP 基础"></a>HTTP 基础</h2><h3 id="HTTP-用于客户端和服务端之间的通信"><a href="#HTTP-用于客户端和服务端之间的通信" class="headerlink" title="HTTP 用于客户端和服务端之间的通信"></a>HTTP 用于客户端和服务端之间的通信</h3><p>HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有接收到请求之前不会发送响应。</p>
<p>客户端发出的请求报文是由请求方法(GET等)、请求 URI（在首部指定Host就不需要绝对地址了）、协议版本（HTTP1.1）、请求首部字段和内容实体构成的。</p>
<p>服务端的响应报文由协议版本、状态码、用以解释状态码的原因短语(OK)、响应首部字段以及内容实体构成。</p>
<h3 id="HTTP-是不保存状态的协议"><a href="#HTTP-是不保存状态的协议" class="headerlink" title="HTTP 是不保存状态的协议"></a>HTTP 是不保存状态的协议</h3><p>HTTP 是一种不保存状态，即无状态（stateless）协议。也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理。</p>
<p>比如，用户登录到一家购物网站，即使他跳转到该站的其他页面后，也需要能继续保持登录状态。针对这个实例，网站为了能够掌握是谁送出的请求，需要保存用户的状态。HTTP/1.1 虽然是无状态协议，为了实现保持状态功能，于是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。</p>
<h3 id="告知服务器意图的-HTTP-方法"><a href="#告知服务器意图的-HTTP-方法" class="headerlink" title="告知服务器意图的 HTTP 方法"></a>告知服务器意图的 HTTP 方法</h3><ul>
<li>GET 获取资源</li>
<li>POST 传输内容实体</li>
<li>PUT 传输文件（需配合验证机制）</li>
<li>HEAD 获得报文头部</li>
<li>DELETE 删除文件（需配合验证机制）</li>
<li>OPTIONS 询问支持的方法</li>
</ul>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。</p>
<p>Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。</p>
<p>服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</p>
<h2 id="HTTP-报文中的-HTTP-信息"><a href="#HTTP-报文中的-HTTP-信息" class="headerlink" title="HTTP 报文中的 HTTP 信息"></a>HTTP 报文中的 HTTP 信息</h2><h3 id="压缩传输的内容编码，提升传输速率"><a href="#压缩传输的内容编码，提升传输速率" class="headerlink" title="压缩传输的内容编码，提升传输速率"></a>压缩传输的内容编码，提升传输速率</h3><p>内容编码指明应用在实体内容上的编码格式，并保持实体信息原样压缩。内容编码后的实体由客户端接收并负责解码。<br>常用的内容编码有以下几种：</p>
<ol>
<li>gzip（GNU zip）</li>
<li>compress（UNIX 系统的标准压缩）</li>
<li>deflate（zlib）</li>
<li>identity（不进行编码）</li>
</ol>
<h3 id="获取部分内容的范围请求"><a href="#获取部分内容的范围请求" class="headerlink" title="获取部分内容的范围请求"></a>获取部分内容的范围请求</h3><p>如果下载过程中遇到网络中断的情况，那就必须重头开始。为了解决上述问题，需要一种可恢复的机制。所谓恢复是指能从之前下载中断处恢复下载。</p>
<p>要实现该功能需要指定下载的实体范围。像这样，指定范围发送的请求叫做范围请求（Range Request）。</p>
<h2 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h2><p>状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>类别</th>
<th>原因</th>
</tr>
</thead>
<tbody>
<tr>
<td>1XX</td>
<td>Informational（信息性状态码）</td>
<td>接收的请求正在处理</td>
</tr>
<tr>
<td>2XX</td>
<td>Success（成功状态码）</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td>3XX</td>
<td>Redirection（重定向状态码）</td>
<td>需求进行附加操作以完成请求</td>
</tr>
<tr>
<td>4XX</td>
<td>Client Error（客户端错误状态码）</td>
<td>服务器无法处理请求</td>
</tr>
<tr>
<td>5XX</td>
<td>Server Error（服务器错误状态码）</td>
<td>服务器处理请求出错</td>
</tr>
</tbody>
</table>
<h3 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h3><ul>
<li>200 OK：表示从客户端发来的请求在服务器端被正常处理了</li>
<li>206 Partial Content：请求处理成功，返回部分内容，响应报文中包含 Content-Range 指定范围的实体内容</li>
</ul>
<h3 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h3><ul>
<li>301 Moved Permanently：永久性重定向。表示请求的资源已被分配了新的 URI，以后应使用资源现在所指的 URI。</li>
<li>302 Found：临时性重定向。表示请求的资源已被分配了新的 URI，希望用户（本次）能使用新的 URI 访问。已移动的资源对应的 URI 将来还有可能发生改变。</li>
<li>304 Not Modified：表示请求的资源没有改变，可以使用客户端上未过期的资源 </li>
</ul>
<h3 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h3><ul>
<li>400 Bad Request：表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。</li>
<li>403 Forbidden：表示请求资源的访问被服务器拒绝了。</li>
<li>404 Not Found：表示服务器上没有请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</li>
</ul>
<h3 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h3><ul>
<li><p>500 Internal Server Error：表示服务器在执行请求时发生了错误。</p>
</li>
<li><p>503 Service Unavailable：表示服务器暂时处于超负载或者正在进行停机维护，现在无法处理请求</p>
</li>
</ul>
<h2 id="HTTP-首部字段"><a href="#HTTP-首部字段" class="headerlink" title="HTTP 首部字段"></a>HTTP 首部字段</h2><p>使用首部字段是为了给浏览器和服务器提供报文主体大小、所使用的语言、认证信息等内容。</p>
<h3 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h3><table>
<thead>
<tr>
<th>首部字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Cache-Control</td>
<td>控制缓存的行为</td>
</tr>
<tr>
<td>Upgrade</td>
<td>升级为其他协议</td>
</tr>
</tbody>
</table>
<h3 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h3><table>
<thead>
<tr>
<th>首部字段名</th>
<th>说明</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept</td>
<td>用户代理可处理的媒体类型</td>
<td>Accept: text/html,application/xml</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>优先的内容编码</td>
<td>Accept-Encoding: gzip, deflate </td>
</tr>
<tr>
<td>Accept-Language</td>
<td>优先的语言</td>
<td>Accept-Language: zh-cn,zh;q=0.7 </td>
</tr>
<tr>
<td>Host</td>
<td>请求资源所在服务器</td>
<td>Host: swift.diagon.me</td>
</tr>
<tr>
<td>User-Agent</td>
<td>HTTP 客户端程序的信息</td>
<td>User-Agent: Mozilla/5.0 </td>
</tr>
<tr>
<td>If-Modified-Since</td>
<td>比较资源的更新时间</td>
</tr>
<tr>
<td>If-None-Match</td>
<td>比较实体标记（ETag）</td>
</tr>
</tbody>
</table>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><h3 id="HTTP-安全隐患"><a href="#HTTP-安全隐患" class="headerlink" title="HTTP 安全隐患"></a>HTTP 安全隐患</h3><h4 id="通信使用明文（不加密），内容可能会被窃听"><a href="#通信使用明文（不加密），内容可能会被窃听" class="headerlink" title="通信使用明文（不加密），内容可能会被窃听"></a>通信使用明文（不加密），内容可能会被窃听</h4><h5 id="加密处理防止窃听"><a href="#加密处理防止窃听" class="headerlink" title="加密处理防止窃听"></a>加密处理防止窃听</h5><h6 id="通信的加密"><a href="#通信的加密" class="headerlink" title="通信的加密"></a>通信的加密</h6><p>HTTP 协议中没有加密机制，但可以通过 SSL（Secure Socket Layer，安全套接层），加密 HTTP 的通信线路。</p>
<p>用 SSL 建立安全通信线路之后，就可以在这条线路上进行 HTTP 通信了。与 SSL 组合使用的 HTTP 被称为 HTTPS。</p>
<h6 id="内容加密"><a href="#内容加密" class="headerlink" title="内容加密"></a>内容加密</h6><p>由于 HTTP 协议中没有加密机制，那么就对 HTTP 协议传输的内容本身加密。即把 HTTP 报文里所含的内容进行加密处理。</p>
<p>在这种情况下，客户端需要对 HTTP 报文进行加密处理后再发送请求。</p>
<p>有一点必须引起注意，由于该方式不同于 SSL 将整个通信线路加密处理，所以内容仍有被篡改的风险。</p>
<h4 id="不验证通信方的身份，因此有可能遭遇伪装"><a href="#不验证通信方的身份，因此有可能遭遇伪装" class="headerlink" title="不验证通信方的身份，因此有可能遭遇伪装"></a>不验证通信方的身份，因此有可能遭遇伪装</h4><h5 id="任何人都可以发起请求"><a href="#任何人都可以发起请求" class="headerlink" title="任何人都可以发起请求"></a>任何人都可以发起请求</h5><ul>
<li>无法确定请求发送至目标的 Web 服务器是否是按真实意图返回响应的那台服务器。有可能是已伪装的 Web 服务器。</li>
<li>无法确定响应返回到的客户端是否是按真实意图接收响应的那个客户端。有可能是已伪装的客户端</li>
<li>即使是无意义的请求也会照单全收。无法阻止海量请求下的 DoS 攻击。</li>
</ul>
<h5 id="查明对手的证书"><a href="#查明对手的证书" class="headerlink" title="查明对手的证书"></a>查明对手的证书</h5><p>SSL 不仅提供加密处理，而且还使用了一种被称为证书的手段，可用于确定对方。证书由值得信任的第三方机构颁发，用以证明服务器和客户端是实际存在的。</p>
<h4 id="无法证明报文的完整性，所以有可能已遭篡改"><a href="#无法证明报文的完整性，所以有可能已遭篡改" class="headerlink" title="无法证明报文的完整性，所以有可能已遭篡改"></a>无法证明报文的完整性，所以有可能已遭篡改</h4><h5 id="接收到的内容可能有误"><a href="#接收到的内容可能有误" class="headerlink" title="接收到的内容可能有误"></a>接收到的内容可能有误</h5><p>请求或响应在传输途中，遭攻击者拦截并篡改内容的攻击称为中间人攻击</p>
<h5 id="如何防止篡改"><a href="#如何防止篡改" class="headerlink" title="如何防止篡改"></a>如何防止篡改</h5><p>SSL 提供认证和加密处理及摘要功能。”</p>
<h3 id="HTTP-加密-认证-完整性保护-HTTPS"><a href="#HTTP-加密-认证-完整性保护-HTTPS" class="headerlink" title="HTTP + 加密 + 认证 + 完整性保护 = HTTPS"></a>HTTP + 加密 + 认证 + 完整性保护 = HTTPS</h3><h4 id="HTTPS-是身披-SSL-外壳的-HTTP"><a href="#HTTPS-是身披-SSL-外壳的-HTTP" class="headerlink" title="HTTPS 是身披 SSL 外壳的 HTTP"></a>HTTPS 是身披 SSL 外壳的 HTTP</h4><p>通常，HTTP 直接和 TCP 通信。当使用 SSL 时，则演变成先和 SSL 通信，再由 SSL 和 TCP 通信了。简言之，所谓 HTTPS，其实就是身披 SSL 协议这层外壳的 HTTP。</p>
<p>SSL 是独立于 HTTP 的协议，所以不光是 HTTP 协议，其他运行在应用层的 均可配合 SSL协议使用。SSL 是当今世界上应用最为广泛的网络安全技术。</p>
<h4 id="相互交换密钥的公开密钥加密技术"><a href="#相互交换密钥的公开密钥加密技术" class="headerlink" title="相互交换密钥的公开密钥加密技术"></a>相互交换密钥的公开密钥加密技术</h4><p>SSL 采用一种叫做公开密钥加密的加密处理方式。近代的加密方法中加密算法是公开的，而密钥却是保密的。通过这种方式得以保持加密方法的安全性。</p>
<p>加密和解密都会用到密钥。没有密钥就无法对密码解密，反过来说，任何人只要持有密钥就能解密了。如果密钥被攻击者获得，那加密也就失去了意义。</p>
<h5 id="对称密钥加密的困境"><a href="#对称密钥加密的困境" class="headerlink" title="对称密钥加密的困境"></a>对称密钥加密的困境</h5><p>加密和解密同用一个密钥的方式称为共享密钥加密，也被叫做对称密钥加密。即加密解密用同样的密钥。</p>
<p>以共享密钥方式加密时必须将密钥也发给对方。可究竟怎样才能安全地转交？在互联网上转发密钥时，如果通信被监听那么密钥就可会落入攻击者之手，同时也就失去了加密的意义。另外还得设法安全地保管接收到的密钥。</p>
<h5 id="使用两把密钥的公开（非对称）密钥加密"><a href="#使用两把密钥的公开（非对称）密钥加密" class="headerlink" title="使用两把密钥的公开（非对称）密钥加密"></a>使用两把密钥的公开（非对称）密钥加密</h5><p>公开密钥加密使用一对非对称的密钥。一把叫做私有密钥（private key），另一把叫做公开密钥（public key）。顾名思义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。</p>
<p>使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。利用这种方式，不需要发送用来解密的私有密钥，也不必担心密钥被攻击者窃听而盗走</p>
<h5 id="HTTPS-采用混合加密机制"><a href="#HTTPS-采用混合加密机制" class="headerlink" title="HTTPS 采用混合加密机制"></a>HTTPS 采用混合加密机制</h5><p>公开密钥加密与对称密钥加密相比，其处理速度要慢。所以 HTTPS 使用公开密钥的方式安全的交换了稍后对称加密中会使用的密钥，之后的建立通信交换报文阶段则使用对称密钥加密方式。</p>
<h4 id="证明公开密钥正确性的证书"><a href="#证明公开密钥正确性的证书" class="headerlink" title="证明公开密钥正确性的证书"></a>证明公开密钥正确性的证书</h4><p>公开密钥加密方式还是存在一些问题的。那就是无法证明公开密钥本身就是货真价实的公开密钥。比如，正准备和某台服务器建立公开密钥加密方式下的通信时，如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或许在公开密钥传输途中，真正的公开密钥已经被攻击者替换掉了。</p>
<p>为了解决上述问题，可以使用由数字证书认证机构（CA，Certificate Authority）和颁发的公开密钥证书。</p>
<ol>
<li>服务器方向数字证书认证机构提交公开密钥。</li>
<li>数字证书认证机构在判明提出申请者的身份之后，会用自己的私有密钥对服务器方的公开密钥做数字签名，并向网站方颁发公钥证书。</li>
<li>服务器方会将这份由数字证书认证机构颁发的公钥证书发送给客户端，以进行公开密钥加密方式通信。公钥证书也可叫做数字证书或直接称为证书。</li>
<li>接到证书的客户端可使用数字证书认证机构的公开密钥，向数字证书认证机构验证公钥证书上的数字签名。一旦验证通过，客户端便可明确两件事：一，认证服务器的公开密钥的是真实有效的数字证书认证机构。二，服务器的公开密钥是值得信赖的。</li>
<li>使用服务器的公开密钥对报文进行加密后发送。</li>
<li>服务器使用私有密钥对报文解密。</li>
</ol>
<p>此处认证机关的公开密钥必须安全地转交给客户端。使用通信方式时，如何安全转交是一件很困难的事，因此，多数浏览器开发商发布版本时，会事先在内部植入常用认证机关的公开密钥。</p>
<h2 id="基于-HTTP-的功能追加协议"><a href="#基于-HTTP-的功能追加协议" class="headerlink" title="基于 HTTP 的功能追加协议"></a>基于 HTTP 的功能追加协议</h2><h3 id="HTTP-瓶颈"><a href="#HTTP-瓶颈" class="headerlink" title="HTTP 瓶颈"></a>HTTP 瓶颈</h3><p>为了尽可能实时地显示更新的内容，服务器上一有内容更新，就需要直接把那些内容反馈到客户端的界面上。使用HTTP协议探知服务器上是否有内容更新，就必须频繁地从客户端到服务器端进行确认。如果服务器上没有内容更新，那么就会产生徒劳的通信。</p>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>WebSocket，即 Web 浏览器与 Web 服务器之间全双工通信标准。</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>一旦Web服务器与客户端之间建立起WebSocket协议的通信连接，之后所有的通信都依靠这个专用协议进行。通信过程中可互相发送JSON、XML、HTML或图片等任意格式的数据。</p>
<p>由于是建立在 HTTP 基础上的协议，因此连接的发起方仍是客户端，而一旦确立 WebSocket 通信连接，不论服务器还是客户端，任意一方都可直接向对方发送报文。</p>
<h4 id="握手"><a href="#握手" class="headerlink" title="握手"></a>握手</h4><p>为了实现WebSocket通信，在HTTP连接建立之后，需要完成一次“握手”的步骤。</p>
<ul>
<li>握手·请求：为了实现WebSocket通信，需要用到HTTP的Upgrade首部字段，告知服务器通信协议发生改变，以达到握手的目的。</li>
<li>握手·响应：对于之前的请求，返回状态码101 Switching Protocols 的响应。</li>
</ul>
<p>成功握手确立WebSocket连接后，通信时不再使用HTTP的数据帧，而采用WebSocket独立的数据帧。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/iOS-Swift-HTTP-TCP%E2%80%94IP%E2%80%94WebSocket-Socket/#disqus_thread</comments>
    </item>
    
    <item>
      <title>iOS[Swift] 中 XML 解析与 RSS 阅读器的制作</title>
      <link>http://swift.diagon.me/Swift-XML-XMLParser-RSS/</link>
      <guid>http://swift.diagon.me/Swift-XML-XMLParser-RSS/</guid>
      <pubDate>Thu, 16 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;为了实践本文，抽时间给博客添加了 &lt;a href=&quot;http://swift.diagon.me/rss.xml&quot;&gt;RSS 订阅&lt;/a&gt;，中间还遇到了&lt;a href=&quot;http://swift.diagon.me/Hexo-RSS-Next-XML-feed-UTF-8/&quot;
      
      </description>
      
      <content:encoded><![CDATA[<p>为了实践本文，抽时间给博客添加了 <a href="http://swift.diagon.me/rss.xml">RSS 订阅</a>，中间还遇到了<a href="http://swift.diagon.me/Hexo-RSS-Next-XML-feed-UTF-8/">各种问题</a>。 </p>
<h2 id="XML-解析"><a href="#XML-解析" class="headerlink" title="XML 解析"></a>XML 解析</h2><h3 id="XMLParser"><a href="#XMLParser" class="headerlink" title="XMLParser"></a>XMLParser</h3><p>XML 跟 JSON 一样，也是常用的的数据格式。苹果提供了 <code>XMLParser</code>类用来解析 XML 文档。</p>
<p><code>XMLParser</code>常用的两个方法，分别用来初始化和开始解析操作。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">init</span>(data: <span class="type">Data</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">parse</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<h3 id="XMLParserDelegate"><a href="#XMLParserDelegate" class="headerlink" title="XMLParserDelegate"></a>XMLParserDelegate</h3><p>对 XML 的解析实际上是实现 <code>XMLParserDelegate</code> 中的几个方法。<code>XMLParserDelegate</code>方法都是可选的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开始解析时调用</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">parserDidStartDocument</span><span class="params">(XMLParser)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 遇到一个开始标签时调用</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">parser</span><span class="params">(XMLParser, didStartElement: String, namespaceURI: String?, qualifiedName: String?, attributes: [String : String] = [:])</span></span></div><div class="line"></div><div class="line"><span class="comment">// 遇到字符串时调用</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">parser</span><span class="params">(XMLParser, foundCharacters: String)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 遇到结束标签时调用</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">parser</span><span class="params">(XMLParser, didEndElement: String, namespaceURI: String?, qualifiedName: String?)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 成功完成解析时调用</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">parserDidEndDocument</span><span class="params">(XMLParser)</span></span></div></pre></td></tr></table></figure>
<h2 id="解析-RSS"><a href="#解析-RSS" class="headerlink" title="解析 RSS"></a>解析 RSS</h2><h3 id="解析过程分析"><a href="#解析过程分析" class="headerlink" title="解析过程分析"></a>解析过程分析</h3><p>RSS 是一种内容分享格式规范，通常使用 XML 格式实现。观察本博客的<a href="http://swift.diagon.me/rss.xml">RSS</a>。发现每篇日志都包含在一个<code>&lt;item&gt;</code>闭合标签中，而一篇日志的三个要素，标题、日期、内容分别使用的标签为<code>&lt;title&gt;</code>,<code>&lt;pubDate&gt;</code>,<code>&lt;description&gt;</code>。我们在解析 XML 时保存这三块内容即可。</p>
<p>首先我们声明几个 property 存储当前的内容。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> currentElement = <span class="string">""</span> </div><div class="line"><span class="keyword">var</span> currentTitle = <span class="string">""</span></div><div class="line"><span class="keyword">var</span> currentDescription = <span class="string">""</span></div><div class="line"><span class="keyword">var</span> currentPubDate = <span class="string">""</span></div></pre></td></tr></table></figure>
<p>当<code>elementName</code>是 <code>&quot;item&quot;</code>时，说明接下来要解析该<code>&lt;item&gt;</code>包含的内容，即一篇独立的文章。这时候我们将标题、日期、内容 property 设置为空字符串。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">parser</span><span class="params">(<span class="number">_</span> parser: XMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String] = [:])</span></span> &#123;</div><div class="line"></div><div class="line">  currentElement = elementName</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> currentElement == <span class="string">"item"</span> &#123;</div><div class="line">    currentTitle = <span class="string">""</span></div><div class="line">    currentDescription = <span class="string">""</span></div><div class="line">    currentPubDate = <span class="string">""</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来每遇到一个字符，将该字符追加到相应的 property 中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">parser</span><span class="params">(<span class="number">_</span> parser: XMLParser, foundCharacters string: String)</span></span> &#123;</div><div class="line">  <span class="comment">/// Note: current string may only contain part of info.</span></div><div class="line">  <span class="keyword">switch</span> currentElement &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">"title"</span>:</div><div class="line">    currentTitle += string</div><div class="line">  <span class="keyword">case</span> <span class="string">"description"</span>:</div><div class="line">    currentDescription += string</div><div class="line">  <span class="keyword">case</span> <span class="string">"pubDate"</span>:</div><div class="line">    currentPubDate += string</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">break</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>标签<code>item</code>结束时生成该篇文章的 model，存入数组容器。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rssItems = [(title: <span class="type">String</span>, description: <span class="type">String</span>, pubDate: <span class="type">String</span>)]()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">parser</span><span class="params">(<span class="number">_</span> parser: XMLParser, didEndElement elementName: String, namespaceURI: String?, qualifiedName qName: String?)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> elementName == <span class="string">"item"</span> &#123;</div><div class="line">      <span class="keyword">let</span> rssItem = (title: currentTitle, description: currentDescription, pubDate: currentPubDate)</div><div class="line">      rssItems.append(rssItem)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解析结束后更新 UI：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">parserDidEndDocument</span><span class="params">(<span class="number">_</span> parser: XMLParser)</span></span> &#123;</div><div class="line">	<span class="comment">// update UI</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如遇解析错误，打印出来方便调试。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">parser</span><span class="params">(<span class="number">_</span> parser: XMLParser, parseErrorOccurred parseError: Error)</span></span> &#123;</div><div class="line">  <span class="built_in">print</span>(parseError.localizedDescription)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><p>完整的项目代码点<a href="https://github.com/Vernsu/SwiftBlogDemo" target="_blank" rel="external">这里(Github)</a>下载。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/Swift-XML-XMLParser-RSS/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo 博客框架添加 RSS 订阅</title>
      <link>http://swift.diagon.me/Hexo-RSS-Next-XML-feed-UTF-8/</link>
      <guid>http://swift.diagon.me/Hexo-RSS-Next-XML-feed-UTF-8/</guid>
      <pubDate>Wed, 15 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;抽空给博客增加了 &lt;a href=&quot;http://swift.diagon.me/rss.xml&quot;&gt;RSS&lt;/a&gt; 功能。&lt;/p&gt;
&lt;h2 id=&quot;基本步骤&quot;&gt;&lt;a href=&quot;#基本步骤&quot; class=&quot;headerlink&quot; title=&quot;基本步骤&quot;&gt;&lt;/a&gt;基本步骤&lt;
      
      </description>
      
      <content:encoded><![CDATA[<p>抽空给博客增加了 <a href="http://swift.diagon.me/rss.xml">RSS</a> 功能。</p>
<h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><h3 id="安装-RSS-插件"><a href="#安装-RSS-插件" class="headerlink" title="安装 RSS 插件"></a>安装 RSS 插件</h3><p>在 blog 根目录下执行命令安装 RSS 插件: <a href="https://github.com/hexojs/hexo-generator-feed/" target="_blank" rel="external">hexo-generator-feed</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<h3 id="配置-RSS-插件"><a href="#配置-RSS-插件" class="headerlink" title="配置 RSS 插件"></a>配置 RSS 插件</h3><p>编辑 Hexo 的配置文件 <code>_config.yml</code>，添加以下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#RSS 订阅插件</div><div class="line">plugin:</div><div class="line">- hexo-generator-feed</div><div class="line">#RSS 插件配置</div><div class="line">feed:</div><div class="line">  type: rss2</div><div class="line">  path: rss.xml</div><div class="line">  limit: 20</div><div class="line">  hub:</div><div class="line">  content: true</div></pre></td></tr></table></figure>
<h3 id="主题开启-RSS-支持"><a href="#主题开启-RSS-支持" class="headerlink" title="主题开启 RSS 支持"></a>主题开启 RSS 支持</h3><p><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a> 主题，默认开启 RSS。其它主题请参考主题文档。</p>
<h3 id="生成-RSS"><a href="#生成-RSS" class="headerlink" title="生成 RSS"></a>生成 RSS</h3><p>执行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> 重新生成博客文件并完成部署即可。 </p>
<h2 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h2><p>一切进行的这么的自然和谐，然而打开 RSS 页面的时候，What？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">This page contains the following errors:</div><div class="line">error on line 98 at column 35: Input is not proper UTF-8, indicate encoding !</div><div class="line">Bytes: 0x01 0xE9 0x92 0x88</div><div class="line">Below is a rendering of the page up to the first error.</div></pre></td></tr></table></figure>
<p>Google 了一番，很多中文用户都遇到了这个问题，但是并没有找到解决方案。</p>
<p>根据错误提示，用编辑器打开 <code>public</code> 目录下 的<code>rss.xml</code> 或 <code>atom.xml</code>。找到第98行35列，是这样的内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;content type=&quot;html&quot;&gt;&lt;![CDATA[&lt;p&gt;</div></pre></td></tr></table></figure>
<p>继续 Google，找到了十四年前的一篇文章 <a href="https://coderanch.com/t/124970/Invalid-Character-CDATA" target="_blank" rel="external">Invalid Character inside CDATA</a>，大意就是 CDATA 里面的文本不能超出 UTF-8 字符集。</p>
<p>既然找到问题了，就有办法解决了。</p>
<ol>
<li><p>接着看错误信息，<code>Bytes</code> 这行，意思是在 <code>xml</code> 文件里有几个 <code>0x01</code> 字符。</p>
</li>
<li><p>编辑器打开 XML 文件，通过查找功能的正则匹配 <code>\x01</code>，果然找到了几个特殊字符。</p>
</li>
<li><p>然后打开对应文章的<code>.md</code>文档，找到相应的的位置，替换出问题的字符。</p>
</li>
<li><p>重新生成 rss.xml 并部署。</p>
</li>
<li><p>搞定。</p>
</li>
</ol>
<p>点击这里查看生成的 <a href="http://swift.diagon.me/rss.xml">RSS</a>。</p>
<p>然而，为什么会出现这种问题并不得而知。产生这个问题的原因可能是 Hexo 或者 Next 主题的 bug。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/Hexo-RSS-Next-XML-feed-UTF-8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>RxSwift 的基本使用</title>
      <link>http://swift.diagon.me/RxSwift-Getting-Started/</link>
      <guid>http://swift.diagon.me/RxSwift-Getting-Started/</guid>
      <pubDate>Tue, 14 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;本文翻译改编自 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ray&lt;/a&gt; 的&lt;a href=&quot;https://www.raywenderlich.com/138547/get
      
      </description>
      
      <content:encoded><![CDATA[<p>本文翻译改编自 <a href="https://www.raywenderlich.com" target="_blank" rel="external">ray</a> 的<a href="https://www.raywenderlich.com/138547/getting-started-with-rxswift-and-rxcocoa" target="_blank" rel="external">《Getting Started With RxSwift and RxCocoa》</a>。</p>
<p>本教程的初始工程Chocotastic可以在<a href="https://koenig-media.raywenderlich.com/uploads/2016/10/Chocotastic-starter-s3-rxs-3b1.zip" target="_blank" rel="external">这里</a>获取。</p>
<p>这是一个购买巧克力的 APP，主要页面是一个巧克力商品列表，该页面右上角有购物车按钮，购物车按钮会显示当前已加入购物车的商品数量。</p>
<h2 id="非响应式"><a href="#非响应式" class="headerlink" title="非响应式"></a>非响应式</h2><p>我们需要有一个<code>updateCartButton()</code>方法，它用来更新购物车按钮上的显示数量。这个方法在两个地方被调用：</p>
<ul>
<li>在<code>viewWillAppear(_:)</code>中，即视图将要显示时，需要显示之前加入购物车的巧克力数量。</li>
<li>在<code>tableView(_:didSelectRowAt:)</code>中，即新添加一个巧克力到购物车后。</li>
</ul>
<p>这些都是以命令的方式来修改数值：即调用方法来更新数值。也就是说，你必须跟踪你要改变某个值的位置，在该出调用更新方法。</p>
<h2 id="使用-RxSwift-响应式跟新数值"><a href="#使用-RxSwift-响应式跟新数值" class="headerlink" title="使用 RxSwift 响应式跟新数值"></a>使用 RxSwift 响应式跟新数值</h2><h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h3><p>购物车在项目是以单例<code>ShoppingCart.sharedCart</code>的形式存在。打开ShoppingCart.swift文件，单例中有一个变量：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chocolates = [<span class="type">Chocolate</span>]()</div></pre></td></tr></table></figure>
<p>此时，巧克力内容的变更不会被观察到。你可以在它的定义中添加一个didSet闭包，但只有在整个数组被更新才会被调用，数组的元素被更新时不会被调用。</p>
<p>RxSwift有一个解决方案。使用下面这行代码来替代变量的创建：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> chocolates: <span class="type">Variable</span>&lt;[<span class="type">Chocolate</span>]&gt; = <span class="type">Variable</span>([])</div></pre></td></tr></table></figure>
<p>在这里我们不是将 <code>chocolates</code> 设置为<code>Chocolate</code>对象的数组，而将其定义为一个 RxSwift 的 <code>Variable</code>对象，其中泛型类型指定为<code>Chocolate</code>数组。</p>
<p><code>Variable</code>是一个类，所以它使用引用语义。即<code>chocolates</code>引用了一个<code>Variable</code>实例。</p>
<p><code>Variable</code>对象有一个<code>value</code>属性。<code>Chocolate</code>对象数组就被存储在 <code>value</code> 中。</p>
<p><code>Variable</code>的膜法来自于它的<code>asObservable()</code>方法。你可以添加一个<code>Observer</code>来观察这个值。当值发生变化时，<code>Observer</code>会让你知道，并作出响应。</p>
<p>使用<code>Variable</code>和正常使用巧克力对象数组有一个不同，即当你需要访问/更新<code>Chocolates</code>数组中元素时，你必须通过 <code>value</code>属性，而不能直接使用它。</p>
<p>好了，修正编译器的提示错误。<br>将：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> chocolates.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123;</div></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> chocolates.value.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123;</div></pre></td></tr></table></figure>
<p>将：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> chocolates.<span class="built_in">count</span> &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</div></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> chocolates.value.<span class="built_in">count</span> &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</div></pre></td></tr></table></figure>
<h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><p>在 <code>ChocolatesOfTheWorldViewController.swift</code>文件并添加以下属性：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div></pre></td></tr></table></figure>
<p>这里创建了一个<code>DisposeBag</code>对象，用于确保设置的<code>Observer</code>在<code>deinit()</code>中被清理掉。</p>
<p>在 //MARK: Rx Setup 注释下面添加以下代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK: Rx Setup</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setupCartObserver</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="comment">//1</span></div><div class="line">  <span class="type">ShoppingCart</span>.sharedCart.chocolates.asObservable()</div><div class="line">    .subscribe(onNext: &#123; <span class="comment">//2</span></div><div class="line">      chocolates <span class="keyword">in</span></div><div class="line">      <span class="keyword">self</span>.cartButton.title = <span class="string">"<span class="subst">\(chocolates.<span class="built_in">count</span>)</span> \u&#123;1f36b&#125;"</span></div><div class="line">    &#125;)</div><div class="line">    .addDisposableTo(disposeBag) <span class="comment">//3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就设置了一个响应式的 <code>Observer</code> 来自动更新购物车按钮。<code>RxSwift</code>大量使用链式函数，这意味着每一个函数都接受前一个函数的结果。</p>
<p>解释一下发生的事情：</p>
<ul>
<li><p>首先，把购物车的chocolates变量作为一个<code>Observable</code>；</p>
</li>
<li><p>在这个<code>Observable</code>上调用<code>subscribe(onNext:)</code>方法，以监听<code>Observable</code>的值的变化。<code>subscribe(onNext:)</code>接受一个闭包作为参数，在每次值改变时，会执行这个闭包。闭包的传入参数是<code>Observable</code>的新值。你将会接受到变更通知，直到你取消订阅或者你的订阅被丢弃。从这个方法得到的是一个实现了<code>Disposable</code>的<code>Observer</code>对象；</p>
</li>
<li><p>将上一步得到的<code>Observer</code>对象添加到<code>disposeBag</code>中，以确保在订阅对象被释放时你的订阅被丢弃。</p>
</li>
<li><p>最后，删除<code>updateCartButton()</code>方法。以及<code>viewWillAppear(_:)</code>和<code>tableView(_:didSelectRowAt:)</code>中<code>updateCartButton()</code>的调用。</p>
</li>
</ul>
<p>在<code>viewDidLoad()</code>里面添加一行代码，调用这个监听行为：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setupCartObserver()</div></pre></td></tr></table></figure>
<p>大功告成，购物车按钮可以自动更新了。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>
]]></content:encoded>
      
      <comments>http://swift.diagon.me/RxSwift-Getting-Started/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 开发中的响应式编程：RxSwift 初探</title>
      <link>http://swift.diagon.me/RxSwift-Observer-Observable-DisposeBag/</link>
      <guid>http://swift.diagon.me/RxSwift-Observer-Observable-DisposeBag/</guid>
      <pubDate>Mon, 13 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;本文翻译改编自 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ray&lt;/a&gt; 的&lt;a href=&quot;https://www.raywenderlich.com/138547/get
      
      </description>
      
      <content:encoded><![CDATA[<p>本文翻译改编自 <a href="https://www.raywenderlich.com" target="_blank" rel="external">ray</a> 的<a href="https://www.raywenderlich.com/138547/getting-started-with-rxswift-and-rxcocoa" target="_blank" rel="external">《Getting Started With RxSwift and RxCocoa》</a>。</p>
<h2 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h2><p>在面向对象时代，这样的事情是必要的：你用各种方式来监听程序的变化，但是当变化发生时你是得必须主动的告诉系统。</p>
<p>如果当变化发生时，代码能自动响应更新，岂不是更爽？这就是响应式编程(reactive programming)的思想:你的程序可以自主的对底层数据的变化做出响应，而不需要你再去通知它。这让你可以聚焦于处理的逻辑，而不用维护具体的状态。</p>
<p>Swift 中可以使用 KVO,重载 setter, didSet方法来实现这种操作。但是这些方法不怎么好用。我们可以使用一个响应式编程框架：RxSwift，来更好的实现。</p>
<h2 id="RxSwift-基本概念"><a href="#RxSwift-基本概念" class="headerlink" title="RxSwift 基本概念"></a>RxSwift 基本概念</h2><p>RxSwift 是 <a href="http://reactivex.io" target="_blank" rel="external">ReactiveX</a> 针对Swift 的实现。</p>
<h3 id="Observables-和-Observers"><a href="#Observables-和-Observers" class="headerlink" title="Observables 和 Observers"></a>Observables 和 Observers</h3><p>两个基本概念：Observable和Observer。</p>
<ul>
<li><code>Observable</code>是发出变化通知的对象。</li>
<li><code>Observer</code>是监听<code>Observable</code>的对象。当<code>Observable</code>变化时，<code>Observer</code>会收到通知。</li>
</ul>
<p>可以有多个<code>Observer</code>监听同一个<code>Observable</code>。当<code>Observable</code>发生变化时，会通知它所有的<code>Observer</code>。</p>
<h3 id="DisposeBag"><a href="#DisposeBag" class="headerlink" title="DisposeBag"></a>DisposeBag</h3><p><code>DisposeBag</code>是用来处理 ARC 和内存管理的。 <code>DisposeBag</code>是<code>Observer</code> 对象的一个虚拟包，当<code>Observer</code>的父对象被释放时，这个虚拟包会被丢弃。</p>
<p>当带有<code>DisposeBag</code>属性的对象的 <code>deinit()</code>方法被调用时，<code>DisposeBag</code>会清空，并且每一个用完即丢弃(disposable)的<code>Observer</code> 会自动取消对观察内容的监听。这可以让 ARC 正常的回收内存。</p>
<p>如果没有<code>DisposeBag</code>，会有两种后果：要么<code>Observer</code>会产生一个 <code>retain cycle</code>，将无限期的进行监听；要么<code>Observer</code>被意外释放，导致程序崩溃。</p>
<p>所以在设置<code>Observable</code>对象时，将其添加到<code>DisposeBag</code>中。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/RxSwift-Observer-Observable-DisposeBag/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Moya：基于 Alamofire 的网络抽象层</title>
      <link>http://swift.diagon.me/Alamofire-Moya-TargetType/</link>
      <guid>http://swift.diagon.me/Alamofire-Moya-TargetType/</guid>
      <pubDate>Sun, 12 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;什么是-Moya&quot;&gt;&lt;a href=&quot;#什么是-Moya&quot; class=&quot;headerlink&quot; title=&quot;什么是 Moya&quot;&gt;&lt;/a&gt;什么是 Moya&lt;/h2&gt;&lt;p&gt;在 iOS 开发中，除了使用 AFNetworking/Alamofire 这样的针对 &lt;c
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="什么是-Moya"><a href="#什么是-Moya" class="headerlink" title="什么是 Moya"></a>什么是 Moya</h2><p>在 iOS 开发中，除了使用 AFNetworking/Alamofire 这样的针对 <code>URLSession</code> 抽象的网络库之外，我们还需要创建诸如  “APIManager”  或  “NetworkModel”  这样详细的网络抽象层。</p>
<p><a href="https://github.com/Moya/Moya" target="_blank" rel="external">Moya</a> 就是这种网络抽象层的集大成者，URLs、参数等等的配置通通都可以由 Moya 来搞定。</p>
<p>Moya 建立在 Alamofire 之上，全面的覆盖了 Alamofire 的功能。在项目中，我们所有的网络操作都基于 Moya，不会再接触 Alamofire。</p>
<h2 id="Moya-特性"><a href="#Moya-特性" class="headerlink" title="Moya 特性"></a>Moya 特性</h2><ul>
<li>编译时检查 API endpoint 的可用性。</li>
<li>通过关联枚举值对不同 endpoint 定义清晰的用法。</li>
<li>单元测试很容易。将测试作为一等公民来对待。</li>
</ul>
<h2 id="Moya-基本用法"><a href="#Moya-基本用法" class="headerlink" title="Moya 基本用法"></a>Moya 基本用法</h2><p>首先，使用 enum 根据接口文档建立 API targets。这里我们用查询一个 github 用户的 profile 和 repoditory 来举例。</p>
<p>创建一个叫 GitHubAPI.swift 的新文件，使用一个 enum 来明确每一个请求。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">GitHub</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> userProfile(<span class="type">String</span>)</div><div class="line">    <span class="keyword">case</span> userRepositories(<span class="type">String</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个枚举用来在编译时确保你提供了每一个 target 的具体实现。要使用 Moya，这个 enum 必须遵守 TargetType 协议。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">GitHub</span>: <span class="title">TargetType</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> baseURL: <span class="type">URL</span> &#123; <span class="keyword">return</span> <span class="type">URL</span>(string: <span class="string">"https://api.github.com"</span>)! &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> path: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">case</span> .userProfile(<span class="keyword">let</span> name):</div><div class="line">            <span class="keyword">return</span> <span class="string">"/users/<span class="subst">\(name.urlEscaped)</span>"</span></div><div class="line">        <span class="keyword">case</span> .userRepositories(<span class="keyword">let</span> name):</div><div class="line">            <span class="keyword">return</span> <span class="string">"/users/<span class="subst">\(name.urlEscaped)</span>/repos"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> method: <span class="type">Moya</span>.<span class="type">Method</span> &#123;</div><div class="line">        <span class="keyword">return</span> .<span class="keyword">get</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> parameters: [<span class="type">String</span>: <span class="type">Any</span>]? &#123;</div><div class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">case</span> .userRepositories(<span class="number">_</span>):</div><div class="line">            <span class="keyword">return</span> [<span class="string">"sort"</span>: <span class="string">"pushed"</span>]</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> parameterEncoding: <span class="type">ParameterEncoding</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">URLEncoding</span>.<span class="keyword">default</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> task: <span class="type">Task</span> &#123;</div><div class="line">        <span class="keyword">return</span> .request</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> sampleData: <span class="type">Data</span> &#123;</div><div class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">case</span> .userProfile(<span class="keyword">let</span> name):</div><div class="line">            <span class="keyword">return</span> <span class="string">"&#123;\"login\": \"<span class="subst">\(name)</span>\", \"id\": 100&#125;"</span>.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)!</div><div class="line">        <span class="keyword">case</span> .userRepositories(<span class="number">_</span>):</div><div class="line">            <span class="keyword">return</span> <span class="string">"[&#123;\"name\": \"Repo Name\"&#125;]"</span>.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)!</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> urlEscaped: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)!</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中我们依次配置了 BaseUrl，路径，请求方式，参数，参数编码，类型， sampleData。其中 sampleData 是单元测试的的模拟数据。很不幸，或者说很幸运，协议中除了 validate 外，都是必须要实现的，容不得你偷懒。</p>
<p>当 enum 实现了 TargetType 协议，意味着 enum 中的每个 case 都成为了一个完整的 endpoint。所谓 endpint 就是指构成一个完整请求的信息。</p>
<p>接下来，我们只需要使用 Moya 提供的 MoyaProvider 发起请求。在 GithubAPI.swift 中声明一个全局的 Provider：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="type">GitHubProvider</span> = <span class="type">MoyaProvider</span>&lt;<span class="type">GitHub</span>&gt;()</div></pre></td></tr></table></figure>
<p>然后在需要的地方发起请求：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">GitHubProvider</span>.request(.userRepositories(<span class="string">"apple"</span>)) &#123; result <span class="keyword">in</span></div><div class="line">    <span class="keyword">switch</span> result &#123;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .success(response):</div><div class="line">        <span class="comment">//doSomething</span></div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .failure(error):</div><div class="line">        <span class="comment">//doSomething</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更详细的写法请参考：<a href="https://github.com/Moya/Moya/blob/master/docs/Examples/Basic.md" target="_blank" rel="external">Moya 基本用法文档</a>，更丰富的 Demo 请参考 <a href="https://github.com/artsy/eidolon/blob/master/Kiosk/App/Networking/ArtsyAPI.swift" target="_blank" rel="external">ArtsyAPI</a>。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/Alamofire-Moya-TargetType/#disqus_thread</comments>
    </item>
    
    <item>
      <title>iOS 性能优化之光栅化</title>
      <link>http://swift.diagon.me/shouldRasterize/</link>
      <guid>http://swift.diagon.me/shouldRasterize/</guid>
      <pubDate>Sat, 11 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;在&lt;a href=&quot;http://swift.diagon.me/off-screen-rendering/&quot;&gt;《iOS 开发中的离屏渲染问题》&lt;/a&gt;一文中提到，离屏渲染通常发生在 GPU 中。一个 tableView 中有大量带圆角的视图，当 tableView 快速滑
      
      </description>
      
      <content:encoded><![CDATA[<p>在<a href="http://swift.diagon.me/off-screen-rendering/">《iOS 开发中的离屏渲染问题》</a>一文中提到，离屏渲染通常发生在 GPU 中。一个 tableView 中有大量带圆角的视图，当 tableView 快速滑动时，可以看到 GPU 已经被占满，而 CPU 占用量很少。这时界面仍然能正常滑动，但平均帧数会降到很低。为了避免这种情况，可以尝试开启光栅化（CALayer.shouldRasterize ），但这会把原本 GPU 离屏渲染的操作转嫁到 CPU 上去。</p>
<h2 id="光栅化"><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h2><p><a href="http://swift.diagon.me/off-screen-rendering/">《iOS 开发中的离屏渲染问题》</a>中提到的 GPU 离屏渲染是自动触发的，而开启光栅化，是手动启动离屏渲染，并且将离屏渲染的工作交由 CPU 处理。</p>
<p>开启光栅化会将图层渲染为一个屏幕之外的位图(bitmap)，然后将这个位图缓存起来。图层有复杂的视觉效果，这样做就会比重绘所有帧划划算的多。但是光栅化原始图像需要时间，而且还会消耗额外的内存。</p>
<p>当我们使用得当，光栅化可以提供很大的性能优势，但是一定要避免用在内容是动态变化的图层上，不然它缓存方面的优势就会丧失，而且会让性能变的更糟。</p>
<p>另外要注意的一点，设置 <code>shouldRasterize</code> 的同时也要设置 <code>rasterizationScale</code>。</p>
<h2 id="最优设置"><a href="#最优设置" class="headerlink" title="最优设置"></a>最优设置</h2><p>在<a href="http://swift.diagon.me/cornerRadius/">《iOS 性能优化之视图圆角》</a>中提到了几种性能优化的方法，开启光栅化也能起到一定的性能优化作用。</p>
<p>经过测试，对于 tableView 来说，光栅化性能最好的方式是是开启 cell 的 <code>shouldRasterize</code>，并将  <code>rasterizationScale</code> 设置为 <code>UIScreen.main.scale</code>。如果设置<code>cell.layer.rasterizationScale = cell.layer.contentsScale</code>则会出现视图模糊的现象。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cell.layer.shouldRasterize = <span class="literal">true</span></div><div class="line">cell.layer.rasterizationScale = <span class="type">UIScreen</span>.main.scale</div></pre></td></tr></table></figure>
<p>若 cell 中有多个需要离屏渲染的子视图，对每个子视图分别开启光栅化并不会优化性能，反而可能造成性能下降。</p>
<h2 id="使用-Instruments-监测性能"><a href="#使用-Instruments-监测性能" class="headerlink" title="使用 Instruments 监测性能"></a>使用 Instruments 监测性能</h2><p>Instruments 的 Core Animation 工具里有检测光栅化是否正确使用的选项：<code>Color Hits Green and Misses Red</code>，如果开启了光栅化，渲染结果会被缓存，如果图层是绿色，就表示有渲染缓存可用；如果是红色，就表示无渲染缓存可用，缓存会被重复创建，这就可能导致性能问题。</p>
<p>注意：这个工具只能在真机上调试时使用。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/shouldRasterize/#disqus_thread</comments>
    </item>
    
    <item>
      <title>iOS 性能优化之视图圆角</title>
      <link>http://swift.diagon.me/cornerRadius/</link>
      <guid>http://swift.diagon.me/cornerRadius/</guid>
      <pubDate>Fri, 10 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;在&lt;a href=&quot;http://swift.diagon.me/off-screen-rendering/&quot;&gt;《iOS 开发中的离屏渲染问题》&lt;/a&gt;中提到，大量的离屏渲染会造成性能问题。在 TableView 中使用 cornerRadius 和 maskToBound
      
      </description>
      
      <content:encoded><![CDATA[<p>在<a href="http://swift.diagon.me/off-screen-rendering/">《iOS 开发中的离屏渲染问题》</a>中提到，大量的离屏渲染会造成性能问题。在 TableView 中使用 cornerRadius 和 maskToBounds 共同设置 View 的圆角是最常见的引发离屏渲染性能问题的场景。</p>
<h2 id="为视图设置圆角时触发离屏渲染"><a href="#为视图设置圆角时触发离屏渲染" class="headerlink" title="为视图设置圆角时触发离屏渲染"></a>为视图设置圆角时触发离屏渲染</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cell.view.layer.cornerRadius = <span class="number">15</span></div><div class="line">cell.view.layer.masksToBounds = <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>cornerRadius 和 maskToBounds 分别独立使用的时候不会有性能问题，但是当他们结合在一起，就触发了离屏渲染。</p>
<p>注：在iOS9 之后的系统中 UIImageView 使用 png 图片设置圆角时被苹果优化，不会触发离屏渲染。contents 为空的视图如 UIView 也不会触发离屏渲染。但是其他类型的视图（如UILabel，UIButton）通过这种方式设置圆角依然会触发离屏渲染。</p>
<h2 id="CAShapeLayer"><a href="#CAShapeLayer" class="headerlink" title="CAShapeLayer"></a>CAShapeLayer</h2><p>可以使用 UIBezierPath 的构造器 <code>init(roundedRect rect: CGRect, cornerRadius: CGFloat)</code> 产生圆角，避免离屏渲染。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> blueLayer = <span class="type">CAShapeLayer</span>()</div><div class="line">blueLayer.frame = <span class="type">CGRect</span>(x: <span class="number">50</span>, y: <span class="number">50</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)</div><div class="line">blueLayer.fillColor = <span class="type">UIColor</span>.blue.cgColor</div><div class="line"></div><div class="line">blueLayer.path = <span class="type">UIBezierPath</span>.<span class="keyword">init</span>(roundedRect: <span class="type">CGRect</span>(x:<span class="number">0</span>, y:<span class="number">0</span>, width:<span class="number">100</span>, height:<span class="number">100</span>) , cornerRadius: <span class="number">20</span>).cgPath</div><div class="line"></div><div class="line"><span class="keyword">self</span>.view.layer.addSublayer(blueLayer)</div></pre></td></tr></table></figure>
<h2 id="使用-Core-Graphics-绘制圆角"><a href="#使用-Core-Graphics-绘制圆角" class="headerlink" title="使用 Core Graphics 绘制圆角"></a>使用 Core Graphics 绘制圆角</h2><p>在对视图绘制圆角的时候，为了避免离屏渲染，可以通过 Core Graphics 将视图重新绘制为一张带圆角的图片。</p>
<p>注意：如果我们重写了 drawRect 方法，并且使用 Core Graphics 进行绘制作，就涉及到了 CPU 渲染。整个渲染过程由 CPU 完成，渲染得到的 bitmap 最后再交由 GPU 用于显示。</p>
<h2 id="光栅化"><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h2><p>对于视图圆角的性能优化，还有一种方式，请参考<a href="http://swift.diagon.me/shouldRasterize/">《iOS 性能优化之光栅化》</a>。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/cornerRadius/#disqus_thread</comments>
    </item>
    
    <item>
      <title>iOS 性能优化之离屏渲染</title>
      <link>http://swift.diagon.me/off-screen-rendering/</link>
      <guid>http://swift.diagon.me/off-screen-rendering/</guid>
      <pubDate>Thu, 09 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;GPU-渲染&quot;&gt;&lt;a href=&quot;#GPU-渲染&quot; class=&quot;headerlink&quot; title=&quot;GPU 渲染&quot;&gt;&lt;/a&gt;GPU 渲染&lt;/h2&gt;&lt;p&gt;图形的生成一般是由 GPU 负责，而 GPU 屏幕渲染有以下两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;On
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="GPU-渲染"><a href="#GPU-渲染" class="headerlink" title="GPU 渲染"></a>GPU 渲染</h2><p>图形的生成一般是由 GPU 负责，而 GPU 屏幕渲染有以下两种方式：</p>
<ol>
<li><p>On-Screen Rendering：当前屏幕渲染，意思是 GPU 的渲染操作是在当前用于显示的屏幕缓冲区进行的。缓冲大小受限，一些复杂的操作可能无法完成。</p>
</li>
<li><p>Off-Screen Rendering：离屏渲染，意思是 GPU 的渲染操作是在当前用于显示的屏幕缓冲区之外新开辟的一个缓冲区进行的。</p>
</li>
</ol>
<h2 id="离屏渲染引发的性能问题"><a href="#离屏渲染引发的性能问题" class="headerlink" title="离屏渲染引发的性能问题"></a>离屏渲染引发的性能问题</h2><p>大量的离屏渲染会引发性能问题，离屏渲染过程中的两个操作的代价很高：</p>
<ol>
<li><p>创建新缓冲区。</p>
</li>
<li><p>上下文切换。离屏渲染过程中需要先从 On-Screen 切换到 Off-Screen，在渲染完成后，需要将渲染结果从 Off-screen 切换到 On-screen。</p>
</li>
</ol>
<p>GPU 会为每一帧（1/60s）重复合成所有的图层，上下文切换发生在每一帧中。</p>
<h2 id="导致离屏渲染的因素"><a href="#导致离屏渲染的因素" class="headerlink" title="导致离屏渲染的因素"></a>导致离屏渲染的因素</h2><p>当图层属性的混合体被指定为在没有预合成之前不能直接在屏幕中绘制时，会触发离屏渲染。</p>
<p>图层的以下属性会导致离屏渲染：</p>
<ul>
<li>圆角 cornerRadius 和 maskToBounds 一起使用时</li>
<li>遮罩/蒙版 masks</li>
<li>阴影 shadows</li>
</ul>
<p>因为上面所说原因，一般情况下应该避免离屏渲染。尽量避免使用 layer 的 border、corner、shadow、mask 等。</p>
<h2 id="使用-Instruments-监测性能"><a href="#使用-Instruments-监测性能" class="headerlink" title="使用 Instruments 监测性能"></a>使用 Instruments 监测性能</h2><p>Instruments 的 Core Animation 工具里有检测离屏渲染的选项：<code>Color Offscreen-Rendered Yellow</code>, 开启后会将离屏渲染的区域标识为黄色。</p>
<p>这个工具的使用在 WWDC 中讲到过：<a href="https://developer.apple.com/videos/play/wwdc2011/121/" target="_blank" rel="external">WWDC 2011: Understanding UIKit Rendering</a>、<a href="https://developer.apple.com/videos/play/wwdc2014/419/" target="_blank" rel="external">WWDC 2014: Advanced Graphics and Animations for iOS Apps </a>。</p>
<p>注意这个工具只能在真机上调试时使用，如果想在模拟器上查看离屏渲染区域可以选择：模拟器菜单 - Debug - Color Offscreen-Rendered。</p>
<h2 id="CPU-渲染"><a href="#CPU-渲染" class="headerlink" title="CPU 渲染"></a>CPU 渲染</h2><p>本文探讨了 GPU 的离屏渲染，关于 CPU 渲染请参考<a href="http://swift.diagon.me/shouldRasterize/">《iOS 性能优化之光栅化》</a>。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/off-screen-rendering/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 中的协议扩展派发</title>
      <link>http://swift.diagon.me/protocol-extension-dispathing/</link>
      <guid>http://swift.diagon.me/protocol-extension-dispathing/</guid>
      <pubDate>Wed, 08 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;当遵循 protocol 的类型重新定义了 protocol 中没有但 protocol extension 中定义的 method 或 property 时，static dispatching 将会执行。这就意味着，property 或 method 的实现依赖于变量或
      
      </description>
      
      <content:encoded><![CDATA[<p>当遵循 protocol 的类型重新定义了 protocol 中没有但 protocol extension 中定义的 method 或 property 时，static dispatching 将会执行。这就意味着，property 或 method 的实现依赖于变量或常量声明的类型，而不是实例实际的类型。</p>
<p>定义一个协议：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">WinLoss</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span> &#123; <span class="keyword">get</span>&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span> &#123; <span class="keyword">get</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该协议有一个 extension:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">WinLoss</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> winningPercentage: <span class="type">Double</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Double</span>(wins) / (<span class="type">Double</span>(wins) + <span class="type">Double</span>(losses))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有一个遵循该协议的类型:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CricketRecord</span>: <span class="title">WinLoss</span></span></div><div class="line">&#123;    </div><div class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> draws: <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> winningPercentage: <span class="type">Double</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Double</span>(wins) / (<span class="type">Double</span>(wins) + <span class="type">Double</span>(losses) + <span class="type">Double</span>(draws))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>观察：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> miamiTuples = <span class="type">CricketRecord</span>(wins: <span class="number">8</span>, losses: <span class="number">7</span>, draws: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> winLoss: <span class="type">WinLoss</span> = miamiTuples</div><div class="line"></div><div class="line">miamiTuples.winningPercentage <span class="comment">// .5 执行 struct 的实现</span></div><div class="line">winLoss.winningPercentage <span class="comment">// .53 !!!执行 extension 的实现</span></div></pre></td></tr></table></figure>
<p>即使 miamiTuples 和 winLoss 包含的是相同的实例，结果也不同。因为 static dispatching 是根据声明类型来选择实现的。miamiTuples 是 CricketRecord 类型的，  winLoss 是 WinLoss 类型的。</p>
<p>注意，这种情况只出现在 protocol 自身没有该成员的情况下，如果</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">WinLoss</span></span></div><div class="line">&#123;    </div><div class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span> &#123; <span class="keyword">get</span>&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span> &#123; <span class="keyword">get</span>&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> winningPercentage: <span class="type">Double</span> &#123; <span class="keyword">get</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>则</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">miamiTuples.winningPercentage <span class="comment">// .5</span></div><div class="line">winLoss.winningPercentage <span class="comment">// .5</span></div></pre></td></tr></table></figure>
<p>这里是 dynamic dispatching。依赖于实际的类型，而不是声明的类型。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/protocol-extension-dispathing/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 中的协议成员的默认实现</title>
      <link>http://swift.diagon.me/protocol-member-default/</link>
      <guid>http://swift.diagon.me/protocol-member-default/</guid>
      <pubDate>Tue, 07 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;http://swift.diagon.me/protocol-extension/&quot;&gt;《Swift 中的协议扩展初探》&lt;/a&gt;一文中列举了使用协议扩展增加并实现新的成员。由于该 property 只在 protocol extension 声明和实现，而
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="http://swift.diagon.me/protocol-extension/">《Swift 中的协议扩展初探》</a>一文中列举了使用协议扩展增加并实现新的成员。由于该 property 只在 protocol extension 声明和实现，而没有在 protocol 自身中声明，所以遵守该 protocol 的类型无需实现该成员。</p>
<p>现在再考虑另一个例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> winningPercentage: <span class="type">Double</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> winningPercentage: <span class="type">Double</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Double</span>(wins) / (<span class="type">Double</span>(wins) + <span class="type">Double</span>(losses))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个例子和之前的 protocol extension 不同之处在于，winningPercentage 是 TeamRecord protocol 已经声明了的成员。</p>
<p>在 protocol extension 中实现 protoxol 声明的成员，就创建了一个该成员的默认实现。此时遵守协议的类型可以不实现该成员 ，而使用其默认实现。</p>
<p>这就是<a href="http://swift.diagon.me/protocol-mutable-method/">《Swift 中的可选协议方法》</a>的理论基础了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BasketballRecord</span>: <span class="title">TeamRecord</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="keyword">let</span> seasonLength = <span class="number">82</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> minneapolisFunctors = <span class="type">BasketballRecord</span>(wins: <span class="number">60</span>, losses: <span class="number">22</span>)</div><div class="line">minneapolisFunctors.winningPercentage</div></pre></td></tr></table></figure>
<p>需要不同的实现时，只需要简单的写下不同的实现即可：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HockeyRecord</span>: <span class="title">TeamRecord</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> ties: <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> winningPercentage: <span class="type">Double</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Double</span>(wins) / (<span class="type">Double</span>(wins) + <span class="type">Double</span>(losses) + <span class="type">Double</span>(ties))</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> chicagoOptionals = <span class="type">BasketballRecord</span>(wins: <span class="number">10</span>, losses: <span class="number">6</span>)</div><div class="line"><span class="keyword">let</span> phoenixStridables = <span class="type">HockeyRecord</span>(wins: <span class="number">8</span>, losses: <span class="number">7</span>, ties: <span class="number">1</span>)</div><div class="line"></div><div class="line">chicagoOptionals.winningPercentage <span class="comment">// 10 / (10 + 6) == .625</span></div><div class="line">phoenixStridables.winningPercentage <span class="comment">// 8 / (8 + 7 + 1) == .500</span></div></pre></td></tr></table></figure>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>



]]></content:encoded>
      
      <comments>http://swift.diagon.me/protocol-member-default/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 中的协议扩展初探</title>
      <link>http://swift.diagon.me/protocol-extension/</link>
      <guid>http://swift.diagon.me/protocol-extension/</guid>
      <pubDate>Mon, 06 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;面向协议的编程打破了旧的协议规则，允许让你用&lt;strong&gt;协议自身实现协议&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你可以用下面的语法定义一个 protocol extension：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>面向协议的编程打破了旧的协议规则，允许让你用<strong>协议自身实现协议</strong>。</p>
<p>你可以用下面的语法定义一个 protocol extension：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> winningPercentage: <span class="type">Double</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> gamesPlayed: <span class="type">Int</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> wins + losses</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里 protocol extension 和 protocol 的不同是：extension 包括了成员的实现。 </p>
<p>我们可以在 protocol extension 中使用 protocol 的成员，因为遵守 TemRecord 协议时，必定实现了 TemRecord 的成员。</p>
<p>现在我们写一个 struct，可以直接使用 gamesPlayed，而不需要重新实现它。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BaseballRecord</span>: <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> winningPercentage: <span class="type">Double</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Double</span>(wins) / (<span class="type">Double</span>(wins) + <span class="type">Double</span>(losses))</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> sanFranciscoSwifts = <span class="type">BaseballRecord</span>(wins: <span class="number">10</span>, losses:<span class="number">5</span>)</div><div class="line"></div><div class="line">sanFranciscoSwifts.gamesPlayed <span class="comment">// 15</span></div></pre></td></tr></table></figure>
<p>无奈滞留在机场，先写这么多。</p>
<p>关于协议扩展更多内容参见：<a href="http://swift.diagon.me/protocol-extension/">《Swift 中的协议成员的默认实现》</a></p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/protocol-extension/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 中 Optional 的隐式解包</title>
      <link>http://swift.diagon.me/optional-IUO/</link>
      <guid>http://swift.diagon.me/optional-IUO/</guid>
      <pubDate>Sun, 05 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;隐式解包&quot;&gt;&lt;a href=&quot;#隐式解包&quot; class=&quot;headerlink&quot; title=&quot;隐式解包&quot;&gt;&lt;/a&gt;隐式解包&lt;/h3&gt;&lt;p&gt;在 iOS 项目中，如果使用 Interface Buider 构建界面，会生成这样的代码：&lt;/p&gt;
&lt;figure cla
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="隐式解包"><a href="#隐式解包" class="headerlink" title="隐式解包"></a>隐式解包</h3><p>在 iOS 项目中，如果使用 Interface Buider 构建界面，会生成这样的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="type">IBOoutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> faceView: <span class="type">UIView</span>!</div></pre></td></tr></table></figure>
<p>我们知道如果要申明 UIVivew 为 Optional 类型，<code>UIView?</code> 这样写就好了。<code>UIView!</code>是什么意思呢? 其实这是一种特殊的 Optional，在使用时编译器会自动进行解包。这种方式被称，隐式解包。</p>
<p>我们在类型后面加一个叹号<code>！</code>，就告诉编译器这个 Optional 处于隐式解包的状态。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Something</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing: <span class="type">Something</span>! = <span class="type">Something</span>()</div><div class="line">thing!.method()</div><div class="line">thing.method()</div></pre></td></tr></table></figure>
<p>最后这两行代码是等效的。当然，如果 <code>thing</code> 为 <code>nil</code>，会导致 crash。那么号称类型安全的 Swift 为什么在有了显式的强制解包还要引入这种含蓄的隐式解包写法呢？</p>
<h3 id="形成原因"><a href="#形成原因" class="headerlink" title="形成原因"></a>形成原因</h3><p>之前在<a href="http://swift.diagon.me/2017/01/23/">《Swift 中为什么要引入 Optional？》</a>文中提到 Objective-C 中哨兵值引发的种种问题，Swift 的解决办法是使用安全的 Optional 类型。但是 Cocoa 框架多年来是由 Objective-C 构造的，不可避免的在很多 API 中携带了 Objective-C 语言的基因。一些 API 的参数和返回值虽然显式声明了具体的类型，但是仍然可能是 nil。如果 Swift 在自动转换过程中全部转换为 Optional，开发者在每次使用时都需要进行 Optional Binding，这是一件痛苦的事情。</p>
<p>所以，隐式解包这种方式这是对历史的妥协。在未来的一天，历史包袱逐渐消失，隐式解包的概念也会逐渐消亡。</p>
<p>目前，最常见的隐式解包就是文章开头提到的使用 Interface Buider 生成的 IBOutlet。如果没有连接 Interface Buider，使用 faceView 会导致 crash。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="type">IBOoutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> faceView: <span class="type">UIView</span>!</div></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>隐式解包并不意味着「这个变量的值不会为 nil 」，而只是一种危险的捷径。</p>
<p>Swift 是一门进化中的语言 ，Swift 3.0 中废除了隐式解包可选类型(ImplicitlyUnwrappedOptional)，并用 IUO 属性代替。理由就是隐式解包破坏了 Swift 的类型安全设计，所以要减少隐式解包的使用。</p>
<p>在变量类型后的 <code>!</code> 不再表示是隐式解包可选类型(ImplicitlyUnwrappedOptional)，而是表示是 Optional，并有一个被隐式指定的属性。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/optional-IUO/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 中的 final 修饰符</title>
      <link>http://swift.diagon.me/final/</link>
      <guid>http://swift.diagon.me/final/</guid>
      <pubDate>Sat, 04 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;http://swift.diagon.me/static-class/&quot;&gt;《Swift 中的 static 和 class 关键字》&lt;/a&gt;一文中提及：「使用 &lt;code&gt;static&lt;/code&gt; 修饰的类方法和类属性无法在子类中重载。也就是说 &lt;co
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="http://swift.diagon.me/static-class/">《Swift 中的 static 和 class 关键字》</a>一文中提及：「使用 <code>static</code> 修饰的类方法和类属性无法在子类中重载。也就是说 <code>static</code> 修饰的类方法和类属性包含了 <code>final</code> 关键字的特性。相当于 <code>final class</code> 。」，本文将详细介绍 <code>final</code> 的作用。</p>
<h3 id="final-的特性"><a href="#final-的特性" class="headerlink" title="final 的特性"></a>final 的特性</h3><p>当使用 <code>final</code> 修饰符修饰 <code>class</code> 的方法 属性 下标时，可以防止他们被重写。例如：<code>final var</code>，<code>final func</code>，<code>final class func</code>，<code>final subscript</code>。</p>
<p>当你试图重写被 <code>fianl</code> 修饰的东西时，编译时会报错。</p>
<p>在申明 <code>class</code> 时，在 <code>calss</code> 之前添加 <code>final</code>，可以标记整个类为 <code>final</code>，如果你尝试继承这个类，编译时会报错。</p>
<p>注意，<code>final</code> 只能修饰 <code>class</code> ，不能用来修饰 <code>struct</code> 和 <code>enum</code>，因为 <code>struct</code> 和 <code>enum</code> 只能遵循协议，无法继承。而协议虽然可以遵循其他协议，但是并不能重写遵循的协议中的成员。</p>
<h3 id="final-常见用法"><a href="#final-常见用法" class="headerlink" title="final 常见用法"></a>final 常见用法</h3><p><code>final</code> 这一特性，在我们写提供给别人使用的代码时要谨慎思考。不希望被继承和重写有这么几种情况：</p>
<ol>
<li>性能调优。编译器可以从<code>final</code>中获取额外信息，以便于对<code>class</code>或<code>class的成员</code>进行优化。这个优化并不明显，所以只建议的极端性能调优的时候使用。</li>
<li>类提供了充分并且可靠的功能。一般这样的类是工具类，可能只有类方法而没有实例方法。比如 MD5 工具类。</li>
<li>子类继承或重载会产生风险。你开发的类库基于某些基本因子，如果基本因子含义被改变，可能会导致功能失效。</li>
</ol>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/final/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Optional Chaining 陷阱</title>
      <link>http://swift.diagon.me/optional-chaining-issue/</link>
      <guid>http://swift.diagon.me/optional-chaining-issue/</guid>
      <pubDate>Fri, 03 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;http://swift.diagon.me/optional-chaining/&quot;&gt;《Swift 中的 Optional Chaining》&lt;/a&gt;讲述了 &lt;code&gt;Optional Chaining&lt;/code&gt;（可选链） 的基本用法和需要注意的问题
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="http://swift.diagon.me/optional-chaining/">《Swift 中的 Optional Chaining》</a>讲述了 <code>Optional Chaining</code>（可选链） 的基本用法和需要注意的问题。这篇文章我们深入探索一下更多可能会面临的问题。</p>
<p>给 <code>Residence</code> 类增加方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printNumberOfRooms</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"The number of rooms is <span class="subst">\(numberOfRooms)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法没有返回值。实际上没有返回值的方法依然返回了值，一个特殊的 <code>Void</code>值。它其实是一个空的元组，可以写成<code>()</code>。</p>
<p>根据<a href="http://swift.diagon.me/optional-chaining/">《Swift 中的 Optional Chaining》</a>指出的原则，如果在 <code>Optional Chaining</code> 调用这个方法，返回的类型应该是  <code>Void?</code>而不是 <code>Void</code>。</p>
<p>因此，我们可以使用 <code>if</code> 语句来判断是否能成功够调用 <code>printNumberOfRooms</code>。通过判断返回值是否为 <code>nil</code> 可以判断调用是否成功。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> john.residence?.printNumberOfRooms() != <span class="literal">nil</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"It was possible to print the number of rooms."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的，我们可以判断通过 <code>Optional Chaining</code> 为属性赋值是否成功。通过可选链给属性复制会返回 <code>Void?</code>，通过判断返回值是否为 <code>nil</code> 就知道赋值是否成功。</p>
<p>if (john.residence?.colorForFirstRoom = “Red”) != nil {<br>    print(“have a color”)<br>} </p>
<p>如果想看看返回值到底是什么可以这样写:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> result = (john.residence?.colorForFirstRoom = <span class="string">"Red"</span>)  &#123;</div><div class="line">    <span class="built_in">print</span>(result)</div><div class="line">&#125;</div><div class="line"><span class="comment">//()</span></div></pre></td></tr></table></figure>
<p><code>residence</code> 存在时，<code>result</code>为一个空的元组<code>()</code>，即 <code>Void</code>。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>
]]></content:encoded>
      
      <comments>http://swift.diagon.me/optional-chaining-issue/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 中的 Optional Chaining</title>
      <link>http://swift.diagon.me/optional-chaining/</link>
      <guid>http://swift.diagon.me/optional-chaining/</guid>
      <pubDate>Thu, 02 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;Optional-Chaining-的基本用法&quot;&gt;&lt;a href=&quot;#Optional-Chaining-的基本用法&quot; class=&quot;headerlink&quot; title=&quot;Optional Chaining 的基本用法&quot;&gt;&lt;/a&gt;Optional Chaining
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="Optional-Chaining-的基本用法"><a href="#Optional-Chaining-的基本用法" class="headerlink" title="Optional Chaining 的基本用法"></a>Optional Chaining 的基本用法</h3><p><code>Optional Chaining</code> (可选链) 中任何一个节点为 <code>nil</code> 时，则整个链条失效，返回 nil。因此，即使链条最后的属性、方法、下标调用返回的结果不是 <code>Optional</code> 类型的，整个链条返回的结果也是 <code>Optional</code> 类型的。</p>
<p>换而言之，<code>Optional Chaining</code> 会将原本返回的结果包装为 <code>Optional</code>。一个原本返回 <code>Int</code> 的方法会返回 <code>Int？</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> residence: <span class="type">Residence</span>?</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Residence</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> numberOfRooms = <span class="number">1</span></div><div class="line">    <span class="keyword">var</span> colorForFirstRoom:<span class="type">String</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">roomName</span><span class="params">()</span></span> -&gt; <span class="type">String</span>?&#123;</div><div class="line">    	<span class="keyword">return</span> <span class="string">"name"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> john = <span class="type">Person</span>()</div><div class="line"><span class="comment">//john.residence = Residence()</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> roomCount = john.residence?.numberOfRooms</div></pre></td></tr></table></figure>
<p>虽然 numberOfRooms 的类型是 <code>Int</code>，但此时得到的 roomCount 的类型是 <code>Int?</code>。与此类似，调用返回值为 <code>Int</code> 类型的方法时，最终得到的结果是 <code>Int?</code>。</p>
<p>如果要在方法的返回值上进行可选链式调用，在方法的圆括号后面加上问号即可:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> roomCount = john.residence?.roomName()?.hasPrefix(<span class="string">"name"</span>)</div></pre></td></tr></table></figure>
<p><strong>在实际使用时 Optional Chaining  经常和 Optional Binding 一起使用</strong>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> roomCount = john.residence?.numberOfRooms &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"John's residence has <span class="subst">\(roomCount)</span> room(s)."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外还可以直接使用 <code>Optional Chaining</code> 设定属性：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">john.residence?.colorForFirstRoom = <span class="string">"Red"</span></div></pre></td></tr></table></figure>
<p>在这个例子中如果等号左侧的链条调用失败，等号右侧的代码不会被执行。</p>
<h3 id="访问-Optional-类型下标"><a href="#访问-Optional-类型下标" class="headerlink" title="访问 Optional 类型下标"></a>访问 Optional 类型下标</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testScores = [<span class="string">"Dave"</span>: [<span class="number">86</span>, <span class="number">82</span>, <span class="number">84</span>], <span class="string">"Bev"</span>: [<span class="number">79</span>, <span class="number">94</span>, <span class="number">81</span>]]</div><div class="line">testScores[<span class="string">"Dave"</span>]?[<span class="number">0</span>] = <span class="number">91</span></div><div class="line">testScores[<span class="string">"Bev"</span>]?[<span class="number">0</span>] += <span class="number">1</span></div><div class="line">testScores[<span class="string">"Brian"</span>]?[<span class="number">0</span>] = <span class="number">72</span></div></pre></td></tr></table></figure>
<p>“Dave” 数组现在是 [91, 82, 84]，”Bev” 数组现在是 [80, 94, 81]，testScores字典中没有”Brian”这个键，所以第三个调用失败。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>记住一句话:使用 <code>Optional Chaining</code> 所得到的东西一定是 <code>Optional</code>类型的。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/optional-chaining/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 中的可选协议方法</title>
      <link>http://swift.diagon.me/protocol-mutable-method/</link>
      <guid>http://swift.diagon.me/protocol-mutable-method/</guid>
      <pubDate>Wed, 01 Feb 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;http://swift.diagon.me/delegate-weak/&quot;&gt;《Swift 中的 delegate 设计模式如何使用 weak 引用》&lt;/a&gt;一文中还留有一个小尾巴。Cocoa 框架中大量使用了 delegate 设计模式，很多 deleg
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="http://swift.diagon.me/delegate-weak/">《Swift 中的 delegate 设计模式如何使用 weak 引用》</a>一文中还留有一个小尾巴。Cocoa 框架中大量使用了 delegate 设计模式，很多 delegate 方法都是可选的。而 Swift 中的  protocol 中的协议方法必须被实现，否则编译器会报错。</p>
<h2 id="协议可选方法的实现"><a href="#协议可选方法的实现" class="headerlink" title="协议可选方法的实现"></a>协议可选方法的实现</h2><h3 id="NSObjectProtocol-与-objc"><a href="#NSObjectProtocol-与-objc" class="headerlink" title="NSObjectProtocol 与 @objc"></a>NSObjectProtocol 与 @objc</h3><p>我们最常使用的 <code>UITableViewDataSource</code> 中，除了 <code>numberOfRowsInSection</code> 和 <code>cellForRowAtindexPath</code> 两个必须实现的方法，其他方法都是可选方法。     </p>
<p>以下为 Cocoa 框架对协议可选方法的实现：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">UITableViewDataSource</span> : <span class="title">NSObjectProtocol</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span></div><div class="line"></div><div class="line">    <span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITableView)</span></span> -&gt; <span class="type">Int</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另一种定义协议可选方法的方式是使用 <code>@objc</code> 关键字，将协议和方法都定义为 Objective-C 的:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">SwiftDiagonProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requiredMethod</span><span class="params">()</span></span></div><div class="line">    <span class="meta">@objc</span> <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">optionalMethod</span><span class="params">()</span></span>   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>```</p>
<h3 id="使用协议扩展"><a href="#使用协议扩展" class="headerlink" title="使用协议扩展"></a>使用协议扩展</h3><p>将协议标记 <code>@objc</code> 意味着 protocol 只能被 calss 实现，struct 和 enum 无法使用。而且对于纯 swift 项目来说，引入 Objective-C 的东西相当让人不爽。</p>
<p>所以更加推荐的实现协议可选方法的方式是：使用 protocol extension。即我们利用协议的扩展实现我们想要可选的方法的默认实现。这样，这些方法在使用时就可以当成可选方法了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SwiftDiagonProtocol</span></span>&#123;</div><div class="line">    <span class="comment">//必须</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requiredMethod</span><span class="params">()</span></span>    </div><div class="line">    <span class="comment">//可选</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">optionalMethod</span><span class="params">()</span></span>    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SwiftDiagonProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">optionalMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//空实现也可以</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwiftClass</span>: <span class="title">SwiftDiagonProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requiredMethod</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//Someting</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//如果需要实现可选方法则实现，这里的实现会覆盖extension中的默认实现</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">optionalMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//Something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="调用可选的-delegate-方法"><a href="#调用可选的-delegate-方法" class="headerlink" title="调用可选的 delegate 方法"></a>调用可选的 delegate 方法</h2><p><a href="http://swift.diagon.me/delegate-weak/">《Swift 中的 delegate 设计模式如何使用 weak 引用》</a>中指出了使用 delegate 的几个步骤，其中第四步是调用 delegate 方法。 既然我们制造出了协议可选方法，那么在调用 delegate 时要不要判断该方法是否被实现？</p>
<p>如果使用 @objc 的方式标记了协议可选方法，则调用 delegate 方法时需要这样写：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delegate?.optionalMethod?()</div></pre></td></tr></table></figure>
<p>而使用协议扩展实现协议可选方法，因为可选方法实际上已经被实现了，所以只需要这样写：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delegate?.optionalMethod()</div></pre></td></tr></table></figure>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/protocol-mutable-method/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 中 delegate 设计模式使用 weak 避免循环引用</title>
      <link>http://swift.diagon.me/delegate-weak/</link>
      <guid>http://swift.diagon.me/delegate-weak/</guid>
      <pubDate>Tue, 31 Jan 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;delegate-模式&quot;&gt;&lt;a href=&quot;#delegate-模式&quot; class=&quot;headerlink&quot; title=&quot;delegate 模式&quot;&gt;&lt;/a&gt;delegate 模式&lt;/h2&gt;&lt;p&gt;Delegate 是 Cocoa 框架中的一种常见设计模式，这种模式
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="delegate-模式"><a href="#delegate-模式" class="headerlink" title="delegate 模式"></a>delegate 模式</h2><p>Delegate 是 Cocoa 框架中的一种常见设计模式，这种模式有利于代码解耦合，在iOS开发中经常被使用。</p>
<p>使用 delegate 一般分为4个步骤：</p>
<ol>
<li>创建一个 delegate protocol</li>
<li>声明一个 delegate property</li>
<li>遵守并实现协议</li>
<li>调用 delegate</li>
</ol>
<p>其中第二步，是新手经常犯错的地方。为了避免循环引用，在声明 delegate property 时，应该声明为 weak 引用。同时使用 weak 也使得 delegate 不存在其值时自动为nil，有效防止因为访问已经被回收的内存导致的 crash。</p>
<p>第四步实现的注意事项请参考： <a href="http://swift.diagon.me/protocol-mutable-method/">《Swift 中的可选协议方法》</a></p>
<h2 id="Swift-中的-delegate"><a href="#Swift-中的-delegate" class="headerlink" title="Swift 中的 delegate"></a>Swift 中的 delegate</h2><h3 id="weak"><a href="#weak" class="headerlink" title="weak"></a>weak</h3><p>Swift 中 protocol 是可以被 class struct enum 使用的。而 struct, enum 并不通过 ARC 来管理内存，所以不能使用 weak 来修饰 delegate。</p>
<p>解决办法就是将 protocol 限制为只能被 class 使用。有下面几种做法：</p>
<h4 id="class-关键字"><a href="#class-关键字" class="headerlink" title="class 关键字"></a>class 关键字</h4><p>申明 protocol 时使用 class 关键字，使得该 protocol 只能适用于 class 类型。</p>
<p>同时我们要将 delegate 设置为 optional 类型，因为使用 weak 修饰 delegate 可能导致 delegate 变为nil，所以要用optional 类型。否则编译器会报错：<code>‘weak’ variable shoule have optional type ‘…?’</code> 。</p>
<p>下面为一次完整的使用 delegate 模式代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一步</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SwiftDiagonDelegate</span>: <span class="title">class</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">didFinishTask</span><span class="params">(sender:SwiftDiagon)</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwiftDiagon</span></span>&#123;</div><div class="line">    <span class="comment">//第二步</span></div><div class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">SwiftDiagonDelegate</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//第四步 使用 optional chaining，当delegate不为nil时才调用方法</span></div><div class="line">        delegate?.didFinishTask(sender: <span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//第三步</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Viewcontroller</span>:<span class="title">UIViewController</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> swift = <span class="type">SwiftDiagon</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        swift.delegate = <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Viewcontroller</span>:<span class="title">SwiftDiagonDelegate</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">didFinishTask</span><span class="params">(sender:SwiftDiagon)</span></span>&#123;</div><div class="line">        <span class="comment">// Something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="objc-与-NSObjectProtocol"><a href="#objc-与-NSObjectProtocol" class="headerlink" title="@objc 与 NSObjectProtocol"></a>@objc 与 NSObjectProtocol</h4><p>通过标记为 Objective-c 也可以使得 protocol 只能被 class 使用。因为 Objective-c 中的 protocol 只能被 class 使用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">SwiftDiagonDelegate</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">didFinishTask</span><span class="params">(sender: SwiftDiagon)</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SwiftDiagonDelegate</span> : <span class="title">NSObjectProtocol</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">didFinishTask</span><span class="params">(sender: SwiftDiagon)</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="可选"><a href="#可选" class="headerlink" title="可选"></a>可选</h3><p>另外一个可能会遇到的问题是 Objective-C 支持可选的 protocol 方法，而 Swift 中所有协议方法都必须被实现。关于这个问题请参考： <a href="http://swift.diagon.me/protocol-mutable-method/">《Swift 中的可选协议方法》</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在纯 Swift 项目中建议用 <code>delegate: class</code> 这样的方式标记 protocol 为只能被 class 使用。因为这种方式直指问题本质。</p>
<p>另外，这个问题也从另一方面说明我们应该多使用值类型，值类型可以很好的避免循环引用问题。使用值类型时值会被拷贝，所以不会出现这样的内存泄露问题。但是我们又不得不使用 Cocoa 框架。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/delegate-weak/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 Last-Modified 和 Etag 精确控制缓存失效时机</title>
      <link>http://swift.diagon.me/last-modified-etag/</link>
      <guid>http://swift.diagon.me/last-modified-etag/</guid>
      <pubDate>Mon, 30 Jan 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;http://swift.diagon.me/urlcache-http/&quot;&gt;《iOS 开发中常用的缓存策略：HTTP 协议篇》&lt;/a&gt; 一文中说到 Cache-control 含有 no-cache 时需要进一步验证缓存有效性。一般使用的验证机制有 La
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="http://swift.diagon.me/urlcache-http/">《iOS 开发中常用的缓存策略：HTTP 协议篇》</a> 一文中说到 Cache-control 含有 no-cache 时需要进一步验证缓存有效性。一般使用的验证机制有 Last-Modified 和 ETag。</p>
<h2 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h2><p>Last-Modified 在服务器返回的响应头中，标识资源的最后修改时间。相对应的客户端的请求头中有 If-Modified-Since ，标识客户端所记录的，资源的最后修改时间，值为最后一次请求时返回的 Last-Modified 字段的值。</p>
<p>第一次请求某一个URL时，服务器端的返回状态会是200，内容是你请求的资源，同时响应头中含有 Last-Modified ，格式类似这样：<code>Last-Modified: Fri, 12 May 2006 18:53:33 GMT</code> 。客户端第二次请求此 URL 时，根据 HTTP 协议的规定，客户端向服务器传送 If-Modified-Since 报头，格式类似这样： <code>If-Modified-Since: Fri, 12 May 2006 18:53:33 GMT</code> 。如果服务端的资源没有变化，则自动返回304状态码 <code>Not Changed</code>，内容为空，客户端就直接使用本地的缓存。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。这样就可以保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。</p>
<h2 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h2><p>Etag 在服务器返回的响应头中，是资源的唯一标识符。相对应的客户端的请求头中有 If-None-Match ，标识客户端所记录的，资源的唯一标识符，值为最后一次请求时返回的 Etag 字段的值。</p>
<p>第一次请求某一个URL时，服务器端的返回状态会是200，内容是你请求的资源，同时响应头中含有 Etag ，格式类似这样：<code>Etag：&quot;50b1c1d4f775c61:df3&quot;</code> 。客户端第二次请求此 URL 时，根据 HTTP 协议的规定，客户端向服务器传送 If-None-Match: 报头，格式类似这样： <code>If-None-Match: &quot;50b1c1d4f775c61:df3&quot;</code>。如果服务端的资源没有变化，则自动返回304状态码 <code>Not Changed</code>，与Last-Modified一样。</p>
<h2 id="客户端处理"><a href="#客户端处理" class="headerlink" title="客户端处理"></a>客户端处理</h2><p>若缓存策略为默认的，iOS 系统会自动的处理 Last-Modified 和 ETag 并使用缓存。</p>
<p>如果想自己用代码处理 Last-Modified 和 ETag，那么缓存策略则必须使用  <code>NSURLRequestReloadIgnoringCacheData</code>，忽略缓存，每次都要向服务端进行校验。然后再用代码判断是否使用缓存。</p>
<p>另外如果更新频率较高，比如微博消息列表、一般的处理方式是添加一个接口，客户端将本地缓存的最后一条数据的的时间戳或 id 传给服务端，然后服务端返回新增的数据，没有新数据则返回 nil 或 304。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/last-modified-etag/#disqus_thread</comments>
    </item>
    
    <item>
      <title>URLCache 与 CachedURLResponse</title>
      <link>http://swift.diagon.me/urlcache-cachedurlresponse/</link>
      <guid>http://swift.diagon.me/urlcache-cachedurlresponse/</guid>
      <pubDate>Sun, 29 Jan 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;http://swift.diagon.me/urlcache-condiguration/&quot;&gt;《iOS 开发中 URLCache 的应用》&lt;/a&gt;中介绍了 URLCache 的使用方法。本文将进一步讲解 URLCache 更加深层次的用法。 &lt;/p&gt;
&lt;
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="http://swift.diagon.me/urlcache-condiguration/">《iOS 开发中 URLCache 的应用》</a>中介绍了 URLCache 的使用方法。本文将进一步讲解 URLCache 更加深层次的用法。 </p>
<h2 id="CachedURLResponse"><a href="#CachedURLResponse" class="headerlink" title="CachedURLResponse"></a>CachedURLResponse</h2><p>CachedURLResponse 包含了一个服务端响应 metadata 的 URLResponse 和 一个包含实际存储数据 的 Data。</p>
<h3 id="存取方法"><a href="#存取方法" class="headerlink" title="存取方法"></a>存取方法</h3><p>URLCache将 URLRequest/URLSessionDataTask 和 CachedURLResponse 进行了映射。</p>
<p>得到和存储缓存对象的方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cachedResponse</span><span class="params">(<span class="keyword">for</span> request: URLRequest)</span></span> -&gt; <span class="type">CachedURLResponse</span>?</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">storeCachedResponse</span><span class="params">(<span class="number">_</span> cachedResponse: CachedURLResponse, <span class="keyword">for</span> request: URLRequest)</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">storeCachedResponse</span><span class="params">(<span class="number">_</span> cachedResponse: CachedURLResponse, <span class="keyword">for</span> dataTask: URLSessionDataTask)</span></span></div></pre></td></tr></table></figure>
<h3 id="修改缓存数据"><a href="#修改缓存数据" class="headerlink" title="修改缓存数据"></a>修改缓存数据</h3><p>URLSessionDataDelegate 协议中方法可以在数据返回后即将缓存时调用的方法。可以在这个方法里可以对即将缓存的数据进行修改，在代理方法中必须调用 completionHandler，提供要缓存的数据，如果传 nil 则表示不缓存。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, dataTask: URLSessionDataTask, willCacheResponse proposedResponse: CachedURLResponse, completionHandler: @escaping <span class="params">(CachedURLResponse?)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>同时，这个方法中有说明：<strong>如果一个请求的响应内容的大小超过了 URLCache 中对应硬盘大小的 5%, 它就不会被缓存。</strong></p>
<p>在 Alamofire 中可以这样写：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.<span class="type">Manager</span></div><div class="line">.sharedInstance</div><div class="line">.delegate</div><div class="line">.dataTaskWillCacheResponse = &#123; (session, task, cachedResponse) -&gt; <span class="type">NSCachedURLResponse</span>? <span class="keyword">in</span></div><div class="line">    <span class="keyword">var</span> userInfo = [<span class="type">NSObject</span> : <span class="type">AnyObject</span>]()</div><div class="line">    <span class="comment">// 设置userInfo</span></div><div class="line">    <span class="keyword">return</span> <span class="type">NSCachedURLResponse</span>(response: cachedResponse.response,</div><div class="line">                               data: cachedResponse.data,</div><div class="line">                               userInfo: userInfo,</div><div class="line">                               storagePolicy: cachedResponse.storagePolicy)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h2><p>可以删除全部缓存或者针对某个 URLRequest/URLSessionDataTask 的缓存。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">URLCache</span>.shared.removeAllCachedResponses()</div></pre></td></tr></table></figure>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>在 iOS8 之后 URLCache 是线程安全的。尽管 URLCache 实例方法能够安全的被多个执行上下文同时调用，还是要注意有些方法的使用。比如使用 <code>cacheResponse(for:)</code> 和 <code>storeCachedResponse(_:for:)</code> 在同一个 request 中存取响应，不可避免的会出现竞争条件。URLCache的子类必须实现线程安全的方法重载。</p>
<hr>
<div style="text-align: center"><br>关注公众号（ID：SwiftBetter），进一步探讨主题<br><br><br>每日精选高清题图，可做壁纸<br></div><br><div style="text-align: center"><br><img src="https://vernsu.github.io/images/wxqrcode.jpg" style="text-align: center;display: block;margin:auto;"><br></div>]]></content:encoded>
      
      <comments>http://swift.diagon.me/urlcache-cachedurlresponse/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
